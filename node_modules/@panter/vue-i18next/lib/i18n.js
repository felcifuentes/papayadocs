'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _install = require('./install');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VueI18n = function () {
  function VueI18n(i18next) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, VueI18n);

    var _options$bindI18n = options.bindI18n,
        bindI18n = _options$bindI18n === undefined ? 'languageChanged loaded' : _options$bindI18n,
        _options$bindStore = options.bindStore,
        bindStore = _options$bindStore === undefined ? 'added removed' : _options$bindStore;


    this._vm = null;
    this.i18next = i18next;
    this.onI18nChanged = this.onI18nChanged.bind(this);

    if (bindI18n) {
      this.i18next.on(bindI18n, this.onI18nChanged);
    }
    if (bindStore && this.i18next.store) {
      this.i18next.store.on(bindStore, this.onI18nChanged);
    }

    this.resetVM({ i18nLoadedAt: new Date() });
  }

  _createClass(VueI18n, [{
    key: 'resetVM',
    value: function resetVM(data) {
      var oldVM = this._vm;
      var silent = _install.Vue.config.silent;
      _install.Vue.config.silent = true;
      this._vm = new _install.Vue({ data: data });
      _install.Vue.config.silent = silent;
      if (oldVM) {
        _install.Vue.nextTick(function () {
          return oldVM.$destroy();
        });
      }
    }
  }, {
    key: 't',
    value: function t(key, options) {
      return this.i18next.t(key, options);
    }
  }, {
    key: 'onI18nChanged',
    value: function onI18nChanged() {
      this.i18nLoadedAt = new Date();
    }
  }, {
    key: 'i18nLoadedAt',
    get: function get() {
      return this._vm.$data.i18nLoadedAt;
    },
    set: function set(date) {
      this._vm.$set(this._vm, 'i18nLoadedAt', date);
    }
  }]);

  return VueI18n;
}();

exports.default = VueI18n;


VueI18n.install = _install.install;
VueI18n.version = __VERSION__;

if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) && window.Vue) {
  window.Vue.use(VueI18n);
}
module.exports = exports['default'];