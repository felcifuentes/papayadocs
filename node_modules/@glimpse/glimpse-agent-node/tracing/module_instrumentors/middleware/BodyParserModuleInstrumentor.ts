'use strict';

import { IMiddlewareFunction, MiddlewareWrapper } from '../../../inspectors/util/MiddlewareWrapper';
import { IModuleInstrumentor } from '../../IModuleInstrumentor';
import { IModuleInfo } from '../../IModuleInfo';
import { IEnableInstrumentationResult } from '../../IEnableInstrumentationResult';
import { IAgent } from '../../../IAgent';

export class BodyParserModuleInstrumentor implements IModuleInstrumentor {

    private agent: IAgent;

    public get supportedModules(): { [ moduleName: string ]: string; } {
        return {
            'body-parser': '>=1.13 <1.18'
        };
    }

    public setAgent(agent: IAgent) {
        this.agent = agent;
    }

    public enableInstrumentation(moduleInfo: IModuleInfo): IEnableInstrumentationResult {

        // NOTE: Calling the module function will result in a 'deprecated' warning.
        //       We need to keep the function in the new module for compatibility purposes so the warning, while annoying, must be ignored.

        /* tslint:disable no-any */
        const newModule: any = BodyParserModuleInstrumentor.wrapParserFactory(moduleInfo.originalModule, 'bodyParser', 'Body Parser');
        /* tslint:enable no-any */

        // NOTE: The original module explicitly defines these exports as read-only properties so we must create a new module (function).

        newModule.json = BodyParserModuleInstrumentor.wrapParserFactory(moduleInfo.originalModule.json, 'json', 'JSON Body Parser');
        newModule.raw = BodyParserModuleInstrumentor.wrapParserFactory(moduleInfo.originalModule.raw, 'raw', 'Raw Body Parser');
        newModule.text = BodyParserModuleInstrumentor.wrapParserFactory(moduleInfo.originalModule.text, 'text', 'Text Body Parser');
        newModule.urlencoded = BodyParserModuleInstrumentor.wrapParserFactory(moduleInfo.originalModule.urlencoded, 'urlencoded', 'URL-Encoded Body Parser');

        // Right now we don't do any in-depth checking to see if the module couldn't
        // be enabled for some reason, so we hard return true here
        return {
            isEnabled: true,
            newModule
        };
    }

    private static wrapParserFactory(parserFactory, name: string, displayName: string): IMiddlewareFunction {
        return function newParserFactory() {
            const parser = <IMiddlewareFunction> parserFactory.apply(this, arguments);

            MiddlewareWrapper.attachMetadata(parser, name, displayName, 'body-parser');

            return parser;
        };
    }
}

export default BodyParserModuleInstrumentor;
