import * as _ from 'lodash';

import { IModuleInstrumentor } from '../../IModuleInstrumentor';
import { IModuleInfo } from '../../IModuleInfo';
import { IEnableInstrumentationResult } from '../../IEnableInstrumentationResult';
import { MiddlewareWrapper } from '../../../inspectors/util/MiddlewareWrapper';

export class ExpressSessionModuleInstrumentor implements IModuleInstrumentor {
    public get supportedModules(): { [ moduleName: string ]: string; } {
        return {
            'express-session': '1.15.x'
        };
    }

    public enableInstrumentation(moduleInfo: IModuleInfo): IEnableInstrumentationResult {

        const newModule = ExpressSessionModuleInstrumentor.proxyModule(moduleInfo.originalModule);

        // Right now we don't do any in-depth checking to see if the module couldn't
        // be enabled for some reason, so we hard return true here
        return {
            isEnabled: true,
            newModule
        };
    }

    private static proxyModule(originalModule) {
        function newModule(...moduleArgs) {
            const middleware = originalModule.call(this, ...moduleArgs);

            MiddlewareWrapper.attachMetadata(middleware, 'session', 'Session', 'express-session');

            return middleware;
        }

        // Copy the constructors attached to the module function...
        _.assign(newModule, originalModule);

        return newModule;
    }
}

export default ExpressSessionModuleInstrumentor;
