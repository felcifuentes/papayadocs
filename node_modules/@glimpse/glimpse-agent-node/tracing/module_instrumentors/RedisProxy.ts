import Tracing from '../Tracing';
import {
    EVENT_REDIS_START_METHODS, IRedisProxyStartCommand,
    EVENT_REDIS_END_METHODS, IRedisProxyEndCommand
} from './RedisEvents';
import { GuidHelper } from '../../util/GuidHelper';

/**
 * A proxy for the [`redis`](https://www.npmjs.com/package/redis) package.
 */
export class RedisProxy {
    public proxyModule(originalModule) {
        const self = this;
        const originalSend = originalModule.RedisClient.prototype.internal_send_command;

        // Note: This is mixing together both context tracking and dependency tracking
        if (originalSend !== undefined && typeof originalSend === 'function') {
            originalModule.RedisClient.prototype.internal_send_command = function(commandObj) {
                if (commandObj) {
                    const correlationId = GuidHelper.newGuid();
                    const address = this.address;
                    const cb = commandObj.callback;

                    // send pre event
                    self.publishPre(address, commandObj, cb, correlationId);

                    // setup post event
                    if (!cb || !cb.__glimpse_original) {
                        const startTime = process.hrtime();

                        commandObj.callback = function(err, result) {
                            const hrDuration = process.hrtime(startTime);
                            /* tslint:disable-next-line:no-bitwise */
                            const duration = hrDuration[0] * 1e3 + hrDuration[1] / 1e6;
                            self.publishPost(duration, address, commandObj, err, result, cb, correlationId);

                            if (typeof cb === 'function') {
                                cb.apply(this, arguments);
                            }
                        };
                        commandObj.callback.__glimpse_original = cb;
                    }
                }

                return originalSend.call(this, commandObj);
            };
        }

        return originalModule;
    }

    private publishPre(address: string, commandObj, cb, correlationId: string) {
        if (Tracing.isEventEnabled(EVENT_REDIS_START_METHODS)) {
            const data: IRedisProxyStartCommand = { address, commandObj, cb, correlationId };

            Tracing.publish(EVENT_REDIS_START_METHODS, data);
        }
    }

    private publishPost(duration: number, address: string, commandObj, err, result, cb, correlationId: string) {
        if (Tracing.isEventEnabled(EVENT_REDIS_END_METHODS)) {
            const data: IRedisProxyEndCommand = { duration, address, commandObj, err, result, cb, correlationId };

            Tracing.publish(EVENT_REDIS_END_METHODS, data);
        }
    }
}

export default RedisProxy;
