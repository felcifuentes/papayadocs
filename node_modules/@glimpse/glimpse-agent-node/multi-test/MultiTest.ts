import { exec } from 'child_process';
import { multiRequire } from '@glimpse/multi-require';
import * as semver from 'semver';

import { getModuleInfo, resolveModulePath } from '../tracing/ModuleIdentifier';

function getLatestModuleVersion(moduleName: string, cb: (err: Error | undefined, version: string | undefined) => void) {
    // Fetch the latest version of the driver from npm
    exec(`npm view ${moduleName} version`, (err, stdout) => {
        if (err) {
            return cb(err, undefined);
        }

        const version = stdout.toString().trim();

        cb(undefined, version);
    });
}

export interface IMultiTestsModuleCallback {
    (cb: (module, version: string) => void): void;
}

export interface IMultiTests {
    defineTests: (description: string, version: string, cb: IMultiTestsModuleCallback) => void;
    description: string;
    moduleName: string;
    supportedVersionRanges: { [key: string]: string };
    versions: string[];
}

export function defineMultiTests(tests: IMultiTests) {
    describe(tests.description, function() {
        // Extend the default timeout for multi-require tests as it takes extra time to pull down specific versions of packages...
        this.timeout(30000);

        it(`supports the latest version`, done => {
            getLatestModuleVersion(tests.moduleName, (err, version) => {
                if (err) {
                    return done(err);
                }

                let latestTested = false;

                tests.versions.forEach(
                    testedVersion => {
                        if (semver.satisfies(version, testedVersion)) {
                            latestTested = true;
                        }
                    });

                if (!latestTested) {
                    return done(new Error(`The latest version of '${tests.moduleName}' (${version}) is not tested.`));
                }

                if (!semver.satisfies(version, tests.supportedVersionRanges[tests.moduleName])) {
                    return done(new Error(`The latest version of '${tests.moduleName}' (${version}) is not supported by Glimpse.`));
                }

                done();
            });
        });

        for (const version of tests.versions) {
            tests.defineTests(tests.description, version, cb => {
                multiRequire(tests.moduleName, [ version ], { }, (err, baseDir, requiredVersions) => {
                    if (err) {
                        throw err;
                    }

                    const requiredVersion = requiredVersions[version];

                    cb(requiredVersion.originalModule, requiredVersion.resolvedVersion);
                });
            });
        }
    });
}

export function defineLatestTests(tests: IMultiTests) {
    tests.defineTests(tests.description, 'latest', cb => {
        const moduleInfo = getModuleInfo(tests.moduleName, resolveModulePath(tests.moduleName, __dirname), require(tests.moduleName));

        cb(moduleInfo.originalModule, moduleInfo.version);
    });
}
