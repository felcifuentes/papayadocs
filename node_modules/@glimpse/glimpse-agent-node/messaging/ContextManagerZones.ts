
// Zones by-design isn't imported/loaded via module load, so load ambient typings.  See here: https://github.com/angular/zone.js/issues/297#issuecomment-213883210
///<reference path="../node_modules/zone.js/dist/zone.js.d.ts"/>

import { IContext, IContextManager, IRunInContextCallback } from './IContextManager';
import { ContextManagerBase } from './ContextManagerBase';

import * as http from 'http';

export class ContextManagerZones extends ContextManagerBase implements IContextManager {

    private static GLIMPSE_CONTEXT = 'GLIMPSE_CONTEXT';

    public init() {
        super.init();
        // tslint:disable:no-var-requires
        require('zone.js');
    };

    // tslint:disable-next-line:no-any
    public runInContext(context: IContext, callback: IRunInContextCallback): any {
        const zoneSpec: ZoneSpec = {
            name: 'Glimpse Context Zone',
            properties: {
                [ContextManagerZones.GLIMPSE_CONTEXT]: context
            }
        };
        const newZone: Zone = Zone.current.fork(zoneSpec);
        const func = newZone.wrap(callback, 'ContextManagerZones::runInContext()');
        return func(context);
    };

    // tslint:disable-next-line:no-any
    public runInNewContext(req: http.IncomingMessage, callback: IRunInContextCallback): any {
        return this.runInContext(this.createContext(req), callback);
    };

    // tslint:disable-next-line:no-any
    public runInNullContext(callback: IRunInContextCallback): any {
        return this.runInContext(undefined, callback);
    };

    public wrapInCurrentContext(callback: IRunInContextCallback) {
        return Zone.current.wrap(callback, 'ContextManagerZones::wrapInCurrentContext()');
    }

    public currentContext() {
        const z = Zone.current.getZoneWith(ContextManagerZones.GLIMPSE_CONTEXT);
        if (z) {
            return z.get(ContextManagerZones.GLIMPSE_CONTEXT);
        }
        else {
            return undefined;
        }
    };

    public getName(): string {
        return 'ContextManagerZones';
    }
}
