import { IModuleInstrumentor } from '../../IModuleInstrumentor';
import { IModuleInfo } from '../../IModuleInfo';
import { IEnableInstrumentationResult } from '../../IEnableInstrumentationResult';
export declare abstract class MiddlewareModuleInstrumentor implements IModuleInstrumentor {
    private name;
    private displayName;
    private packageName;
    private _supportedModules;
    constructor(supportedModule: string, supportedModuleVersions: string, name: string, displayName: string, packageName: string);
    readonly supportedModules: {
        [moduleName: string]: string;
    };
    enableInstrumentation(moduleInfo: IModuleInfo): IEnableInstrumentationResult;
    protected onProxyModule(originalModule: any, newModule: any): void;
    private proxyModule(originalModule);
}
export default MiddlewareModuleInstrumentor;
