"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A component for buffering content written to a stream.
 */
var StreamBuffer = (function () {
    function StreamBuffer() {
        this.buffer = [];
    }
    Object.defineProperty(StreamBuffer.prototype, "encoding", {
        /**
         * Gets the encoding specified during the last `write()` of a string.
         *
         * @return An encoding (e.g. `utf-8`) or `undefined`.
         */
        get: function () {
            // TODO: We need a way to set the encoding for Buffer content (e.g. by sniffing 'Content-Type' header, if available).
            return this._encoding;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Writes content to the buffer.
     *
     * @param chunk The content to write.
     * @param encoding If the content is a string, its intended encoding or `undefined` to use the default.
     */
    StreamBuffer.prototype.write = function (chunk, encoding) {
        if (typeof chunk === 'string') {
            this._encoding = encoding;
        }
        this.buffer.push(chunk);
    };
    /**
     * Returns the stringified contents of the buffer.
     *
     * @return A string representing the contents of the buffer.
     */
    StreamBuffer.prototype.toString = function () {
        var _this = this;
        return this.buffer
            .map(function (chunk) { return Buffer.isBuffer(chunk) ? chunk.toString(_this.encoding) : chunk; })
            .join('');
    };
    return StreamBuffer;
}());
exports.StreamBuffer = StreamBuffer;
exports.default = StreamBuffer;

//# sourceMappingURL=../../../maps/inspectors/util/StreamBuffer.js.map
