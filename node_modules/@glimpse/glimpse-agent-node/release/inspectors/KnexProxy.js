'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var KnexProxy = (function () {
    function KnexProxy() {
    }
    KnexProxy.prototype.setupProxy = function (agent, knex) {
        return function knexProxy() {
            var realKnex = knex.apply(this, arguments);
            var onStart = function onKnexStart(builder) {
                var context = agent.providers.contextManager.currentContext();
                // NOTE: If there is no current context, the queries are being made outside of any outstanding
                //       HTTP request (such as during application startup) and these should not be logged.
                if (context) {
                    var startTime_1 = new Date();
                    var queries_1 = [];
                    builder.on('query', function onKnexQuery(query) {
                        queries_1.push(query);
                        agent.broker.createAndSendMessage({
                            commandText: query.sql,
                            commandType: '',
                            commandParameters: '',
                            commandMethod: '',
                            commandIsAsync: true,
                            commandStartTime: startTime_1
                        }, ['before-execute-command'], undefined /*indices*/, context);
                    });
                    builder.on('end', function onKnexEnd() {
                        var endTime = new Date();
                        queries_1.forEach(function forQuery() {
                            agent.broker.createAndSendMessage({
                                commandHadException: false,
                                commandEndTime: endTime,
                                commandDuration: endTime.getTime() - startTime_1.getTime(),
                                commandOffset: startTime_1.getTime() - context.startTime.getUnixTimestamp()
                            }, ['after-execute-command'], undefined /*indices*/, context);
                        });
                    });
                }
            };
            realKnex.client.on('start', onStart);
            return realKnex;
        };
    };
    ;
    KnexProxy.prototype.init = function (agent, knex) {
        return this.setupProxy(agent, knex);
    };
    ;
    return KnexProxy;
}());
exports.KnexProxy = KnexProxy;

//# sourceMappingURL=../../maps/inspectors/KnexProxy.js.map
