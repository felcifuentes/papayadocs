"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Tracing_1 = require("../tracing/Tracing");
var RedisEvents_1 = require("../tracing/module_instrumentors/RedisEvents");
var RedisInspector = (function () {
    function RedisInspector() {
        this.listeners = {};
    }
    RedisInspector.prototype.init = function (agent, errorReportingService) {
        var _this = this;
        this.agent = agent;
        this.errorReportingService = errorReportingService;
        this.stackHelper = agent.providers.stackHelper;
        this.messageConverter = agent.providers.messageConverter;
        this.contextManager = this.agent.providers.contextManager;
        this.listeners = (_a = {},
            _a[RedisEvents_1.EVENT_REDIS_START_METHODS] = function (event) { return _this.onStartCommand(event); },
            _a[RedisEvents_1.EVENT_REDIS_END_METHODS] = function (event) { return _this.onEndCommand(event); },
            _a);
        for (var event_1 in this.listeners) {
            if (this.listeners.hasOwnProperty(event_1)) {
                Tracing_1.default.onAlways(event_1, this.listeners[event_1]);
            }
        }
        var _a;
    };
    RedisInspector.prototype.removeEventListeners = function () {
        for (var event_2 in this.listeners) {
            if (this.listeners.hasOwnProperty(event_2)) {
                Tracing_1.default.removeEventListener(event_2, this.listeners[event_2]);
            }
        }
    };
    RedisInspector.prototype.onStartCommand = function (event) {
        var _this = this;
        if (this.contextManager.isWithinContext()) {
            var message_1 = this.coreCreateMessage([
                'data-start',
                'data-store-start',
                'data-store-redis-start',
                'call-stack',
                'correlation',
                'correlation-begin'
            ]);
            var userFrame = [this.stackHelper.tryGetFirstUserCodeFrame(this.stackHelper.captureStack(undefined))];
            this.stackHelper.mapFrames(userFrame, function (mappedFrames) {
                var data = event.data;
                _this.corePublish(message_1, {
                    address: data.address,
                    command: data.commandObj.command,
                    commandArgs: data.commandObj.args,
                    correlationId: data.correlationId,
                    frames: mappedFrames
                });
            });
        }
    };
    RedisInspector.prototype.onEndCommand = function (event) {
        if (this.contextManager.isWithinContext()) {
            var message = this.coreCreateMessage([
                'data-end',
                'data-store-end',
                'data-store-redis-end',
                'correlation',
                'correlation-end'
            ]);
            var data = event.data;
            this.corePublish(message, {
                address: data.address,
                command: data.commandObj.command,
                commandArgs: data.commandObj.args,
                duration: data.duration,
                result: data.result,
                correlationId: data.correlationId
            }, {
                operation: data.commandObj.command,
                duration: data.duration
            });
        }
    };
    RedisInspector.prototype.coreCreateMessage = function (types) {
        if (this.contextManager.isWithinContext()) {
            return this.messageConverter.createMessageEnvelope(types, undefined, this.contextManager.currentContext());
        }
    };
    RedisInspector.prototype.corePublish = function (message, payload, index) {
        if (this.contextManager.isWithinContext()) {
            message.payload = payload;
            message.indices = index;
            var transformedMessage = this.messageConverter.transformMessageForTransit(message, message.payload);
            this.agent.broker.sendMessage(transformedMessage);
        }
    };
    return RedisInspector;
}());
exports.RedisInspector = RedisInspector;

//# sourceMappingURL=../../maps/inspectors/RedisInspector.js.map
