"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Tracing_1 = require("../Tracing");
var RedisEvents_1 = require("./RedisEvents");
var GuidHelper_1 = require("../../util/GuidHelper");
/**
 * A proxy for the [`redis`](https://www.npmjs.com/package/redis) package.
 */
var RedisProxy = (function () {
    function RedisProxy() {
    }
    RedisProxy.prototype.proxyModule = function (originalModule) {
        var self = this;
        var originalSend = originalModule.RedisClient.prototype.internal_send_command;
        // Note: This is mixing together both context tracking and dependency tracking
        if (originalSend !== undefined && typeof originalSend === 'function') {
            originalModule.RedisClient.prototype.internal_send_command = function (commandObj) {
                if (commandObj) {
                    var correlationId_1 = GuidHelper_1.GuidHelper.newGuid();
                    var address_1 = this.address;
                    var cb_1 = commandObj.callback;
                    // send pre event
                    self.publishPre(address_1, commandObj, cb_1, correlationId_1);
                    // setup post event
                    if (!cb_1 || !cb_1.__glimpse_original) {
                        var startTime_1 = process.hrtime();
                        commandObj.callback = function (err, result) {
                            var hrDuration = process.hrtime(startTime_1);
                            /* tslint:disable-next-line:no-bitwise */
                            var duration = hrDuration[0] * 1e3 + hrDuration[1] / 1e6;
                            self.publishPost(duration, address_1, commandObj, err, result, cb_1, correlationId_1);
                            if (typeof cb_1 === 'function') {
                                cb_1.apply(this, arguments);
                            }
                        };
                        commandObj.callback.__glimpse_original = cb_1;
                    }
                }
                return originalSend.call(this, commandObj);
            };
        }
        return originalModule;
    };
    RedisProxy.prototype.publishPre = function (address, commandObj, cb, correlationId) {
        if (Tracing_1.default.isEventEnabled(RedisEvents_1.EVENT_REDIS_START_METHODS)) {
            var data = { address: address, commandObj: commandObj, cb: cb, correlationId: correlationId };
            Tracing_1.default.publish(RedisEvents_1.EVENT_REDIS_START_METHODS, data);
        }
    };
    RedisProxy.prototype.publishPost = function (duration, address, commandObj, err, result, cb, correlationId) {
        if (Tracing_1.default.isEventEnabled(RedisEvents_1.EVENT_REDIS_END_METHODS)) {
            var data = { duration: duration, address: address, commandObj: commandObj, err: err, result: result, cb: cb, correlationId: correlationId };
            Tracing_1.default.publish(RedisEvents_1.EVENT_REDIS_END_METHODS, data);
        }
    };
    return RedisProxy;
}());
exports.RedisProxy = RedisProxy;
exports.default = RedisProxy;

//# sourceMappingURL=../../../maps/tracing/module_instrumentors/RedisProxy.js.map
