"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var MiddlewareWrapper_1 = require("../../../inspectors/util/MiddlewareWrapper");
var ExpressSessionModuleInstrumentor = (function () {
    function ExpressSessionModuleInstrumentor() {
    }
    Object.defineProperty(ExpressSessionModuleInstrumentor.prototype, "supportedModules", {
        get: function () {
            return {
                'express-session': '1.15.x'
            };
        },
        enumerable: true,
        configurable: true
    });
    ExpressSessionModuleInstrumentor.prototype.enableInstrumentation = function (moduleInfo) {
        var newModule = ExpressSessionModuleInstrumentor.proxyModule(moduleInfo.originalModule);
        // Right now we don't do any in-depth checking to see if the module couldn't
        // be enabled for some reason, so we hard return true here
        return {
            isEnabled: true,
            newModule: newModule
        };
    };
    ExpressSessionModuleInstrumentor.proxyModule = function (originalModule) {
        function newModule() {
            var moduleArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                moduleArgs[_i] = arguments[_i];
            }
            var middleware = originalModule.call.apply(originalModule, [this].concat(moduleArgs));
            MiddlewareWrapper_1.MiddlewareWrapper.attachMetadata(middleware, 'session', 'Session', 'express-session');
            return middleware;
        }
        // Copy the constructors attached to the module function...
        _.assign(newModule, originalModule);
        return newModule;
    };
    return ExpressSessionModuleInstrumentor;
}());
exports.ExpressSessionModuleInstrumentor = ExpressSessionModuleInstrumentor;
exports.default = ExpressSessionModuleInstrumentor;

//# sourceMappingURL=../../../../maps/tracing/module_instrumentors/middleware/ExpressSessionModuleInstrumentor.js.map
