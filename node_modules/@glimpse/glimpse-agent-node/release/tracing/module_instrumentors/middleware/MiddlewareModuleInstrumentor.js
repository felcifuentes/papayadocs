"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MiddlewareWrapper_1 = require("../../../inspectors/util/MiddlewareWrapper");
var MiddlewareModuleInstrumentor = (function () {
    function MiddlewareModuleInstrumentor(supportedModule, supportedModuleVersions, name, displayName, packageName) {
        this.name = name;
        this.displayName = displayName;
        this.packageName = packageName;
        this._supportedModules = (_a = {},
            _a[supportedModule] = supportedModuleVersions,
            _a);
        var _a;
    }
    Object.defineProperty(MiddlewareModuleInstrumentor.prototype, "supportedModules", {
        get: function () {
            return this._supportedModules;
        },
        enumerable: true,
        configurable: true
    });
    MiddlewareModuleInstrumentor.prototype.enableInstrumentation = function (moduleInfo) {
        var newModule = this.proxyModule(moduleInfo.originalModule);
        // Right now we don't do any in-depth checking to see if the module couldn't
        // be enabled for some reason, so we hard return true here
        return {
            isEnabled: true,
            newModule: newModule
        };
    };
    MiddlewareModuleInstrumentor.prototype.onProxyModule = function (originalModule, newModule) {
        // No-op.
    };
    MiddlewareModuleInstrumentor.prototype.proxyModule = function (originalModule) {
        var self = this;
        function newModule() {
            var moduleArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                moduleArgs[_i] = arguments[_i];
            }
            var middleware = originalModule.call.apply(originalModule, [this].concat(moduleArgs));
            MiddlewareWrapper_1.MiddlewareWrapper.attachMetadata(middleware, self.name, self.displayName, self.packageName);
            return middleware;
        }
        this.onProxyModule(originalModule, newModule);
        return newModule;
    };
    return MiddlewareModuleInstrumentor;
}());
exports.MiddlewareModuleInstrumentor = MiddlewareModuleInstrumentor;
exports.default = MiddlewareModuleInstrumentor;

//# sourceMappingURL=../../../../maps/tracing/module_instrumentors/middleware/MiddlewareModuleInstrumentor.js.map
