'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var MiddlewareWrapper_1 = require("../../../inspectors/util/MiddlewareWrapper");
var BodyParserModuleInstrumentor = (function () {
    function BodyParserModuleInstrumentor() {
    }
    Object.defineProperty(BodyParserModuleInstrumentor.prototype, "supportedModules", {
        get: function () {
            return {
                'body-parser': '>=1.13 <1.18'
            };
        },
        enumerable: true,
        configurable: true
    });
    BodyParserModuleInstrumentor.prototype.setAgent = function (agent) {
        this.agent = agent;
    };
    BodyParserModuleInstrumentor.prototype.enableInstrumentation = function (moduleInfo) {
        // NOTE: Calling the module function will result in a 'deprecated' warning.
        //       We need to keep the function in the new module for compatibility purposes so the warning, while annoying, must be ignored.
        /* tslint:disable no-any */
        var newModule = BodyParserModuleInstrumentor.wrapParserFactory(moduleInfo.originalModule, 'bodyParser', 'Body Parser');
        /* tslint:enable no-any */
        // NOTE: The original module explicitly defines these exports as read-only properties so we must create a new module (function).
        newModule.json = BodyParserModuleInstrumentor.wrapParserFactory(moduleInfo.originalModule.json, 'json', 'JSON Body Parser');
        newModule.raw = BodyParserModuleInstrumentor.wrapParserFactory(moduleInfo.originalModule.raw, 'raw', 'Raw Body Parser');
        newModule.text = BodyParserModuleInstrumentor.wrapParserFactory(moduleInfo.originalModule.text, 'text', 'Text Body Parser');
        newModule.urlencoded = BodyParserModuleInstrumentor.wrapParserFactory(moduleInfo.originalModule.urlencoded, 'urlencoded', 'URL-Encoded Body Parser');
        // Right now we don't do any in-depth checking to see if the module couldn't
        // be enabled for some reason, so we hard return true here
        return {
            isEnabled: true,
            newModule: newModule
        };
    };
    BodyParserModuleInstrumentor.wrapParserFactory = function (parserFactory, name, displayName) {
        return function newParserFactory() {
            var parser = parserFactory.apply(this, arguments);
            MiddlewareWrapper_1.MiddlewareWrapper.attachMetadata(parser, name, displayName, 'body-parser');
            return parser;
        };
    };
    return BodyParserModuleInstrumentor;
}());
exports.BodyParserModuleInstrumentor = BodyParserModuleInstrumentor;
exports.default = BodyParserModuleInstrumentor;

//# sourceMappingURL=../../../../maps/tracing/module_instrumentors/middleware/BodyParserModuleInstrumentor.js.map
