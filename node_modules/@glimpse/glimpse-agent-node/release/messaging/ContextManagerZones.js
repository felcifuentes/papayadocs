"use strict";
// Zones by-design isn't imported/loaded via module load, so load ambient typings.  See here: https://github.com/angular/zone.js/issues/297#issuecomment-213883210
///<reference path="../node_modules/zone.js/dist/zone.js.d.ts"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ContextManagerBase_1 = require("./ContextManagerBase");
var ContextManagerZones = (function (_super) {
    __extends(ContextManagerZones, _super);
    function ContextManagerZones() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContextManagerZones.prototype.init = function () {
        _super.prototype.init.call(this);
        // tslint:disable:no-var-requires
        require('zone.js');
    };
    ;
    // tslint:disable-next-line:no-any
    ContextManagerZones.prototype.runInContext = function (context, callback) {
        var zoneSpec = {
            name: 'Glimpse Context Zone',
            properties: (_a = {},
                _a[ContextManagerZones.GLIMPSE_CONTEXT] = context,
                _a)
        };
        var newZone = Zone.current.fork(zoneSpec);
        var func = newZone.wrap(callback, 'ContextManagerZones::runInContext()');
        return func(context);
        var _a;
    };
    ;
    // tslint:disable-next-line:no-any
    ContextManagerZones.prototype.runInNewContext = function (req, callback) {
        return this.runInContext(this.createContext(req), callback);
    };
    ;
    // tslint:disable-next-line:no-any
    ContextManagerZones.prototype.runInNullContext = function (callback) {
        return this.runInContext(undefined, callback);
    };
    ;
    ContextManagerZones.prototype.wrapInCurrentContext = function (callback) {
        return Zone.current.wrap(callback, 'ContextManagerZones::wrapInCurrentContext()');
    };
    ContextManagerZones.prototype.currentContext = function () {
        var z = Zone.current.getZoneWith(ContextManagerZones.GLIMPSE_CONTEXT);
        if (z) {
            return z.get(ContextManagerZones.GLIMPSE_CONTEXT);
        }
        else {
            return undefined;
        }
    };
    ;
    ContextManagerZones.prototype.getName = function () {
        return 'ContextManagerZones';
    };
    ContextManagerZones.GLIMPSE_CONTEXT = 'GLIMPSE_CONTEXT';
    return ContextManagerZones;
}(ContextManagerBase_1.ContextManagerBase));
exports.ContextManagerZones = ContextManagerZones;

//# sourceMappingURL=../../maps/messaging/ContextManagerZones.js.map
