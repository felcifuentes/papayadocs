/// <reference types="node" />
import { ClientRequest, IncomingMessage } from 'http';
/**
 * The base event data for request-related events.
 *
 * @property {string} id - An ID that is consistent for all stages of this request
 * @property {ClientRequest} req - The client request object returned from `http.request`
 */
export interface IClientRequestEvent {
    id: string;
    req: ClientRequest;
}
/**
 * This event indicates that a request was created via a call to `http.request()`.
 * This event does *not* indicate that the request was sent, nor that headers are
 * ready to be read, that happens in `IRequestEndEvent`.
 *
 * @property {object} options - The options passed to `http.request`
 */
export interface IClientRequestCreatedEvent extends IClientRequestEvent {
    options: any;
}
export declare const EVENT_HTTP_CLIENT_REQUEST_CREATED = "invoke|post|module:httpClient.request-created";
/**
 * This event indicates that request data was sent to the remote server. This may have
 * occured because of a `req.write` call or a `req.end` call.
 *
 * @property {Buffer|String} chunk - The data chunk written to the remote server
 */
export interface IClientRequestDataSentEvent extends IClientRequestEvent {
    chunk: Buffer | string;
}
export declare const EVENT_HTTP_CLIENT_REQUEST_DATA_SENT = "invoke|pre|module:httpClient.request-data-sent";
/**
 * This event indicates that the request was finalized. No more data may be written
 * after this event, and it is now possible to read the final headers for the request
 */
export interface IClientRequestEndEvent extends IClientRequestEvent {
}
export declare const EVENT_HTTP_CLIENT_REQUEST_END = "invoke|post|module:httpClient.request-end";
/**
 * This event indicates that the request connection has been closed.
 */
export interface IClientRequestCloseEvent extends IClientRequestEvent {
}
export declare const EVENT_HTTP_CLIENT_REQUEST_CLOSE = "invoke|post|module:httpClient.request-close";
/**
 * This event indicates that there was an error completing the request. Note,
 * this event will not be emitted after the `REQUEST_END_EVENT` is emitted.
 * Further errors will be emitted as `EVENT_RESPONSE_ERROR`
 *
 * @property {Error|string} error - The error that occured
 */
export interface IClientRequestErrorEvent extends IClientRequestEvent {
    error: Error | string;
}
export declare const EVENT_HTTP_CLIENT_REQUEST_ERROR = "notify|module:httpClient.request-error";
/**
 * The base event data for response-related events.
 *
 * @property {IncomingMessage} res - The incoming response from the remote server, as passed
 *      to the `response` event.
 */
export interface IClientResponseEvent extends IClientRequestEvent {
    res: IncomingMessage;
}
/**
 * This event indicates that headers for the response have been received. Any response data
 * will come after this event in an `IResponseDataReceivedEvent` event.
 */
export interface IClientResponseReceivedEvent extends IClientResponseEvent {
}
export declare const EVENT_HTTP_CLIENT_RESPONSE_RECEIVED = "notify|module:httpClient.response-received";
/**
 * This event indicates that data was received from the remote server.
 *
 * @property {Buffer|String} chunk - The data chunk received from the remote server
 *      to the `response` event.
 */
export interface IClientResponseDataReceivedEvent extends IClientResponseEvent {
    chunk: Buffer | string;
}
export declare const EVENT_HTTP_CLIENT_RESPONSE_DATA_RECEIVED = "notify|module:httpClient.response-data-received";
/**
 * This event indicates the request has been aborted by the client.
 */
export interface IClientResponseAbortedEvent extends IClientResponseEvent {
}
export declare const EVENT_HTTP_CLIENT_RESPONSE_ABORTED = "notify|module:httpClient.response-aborted";
/**
 * This event indicates the response has ended and the client request has finished.
 */
export interface IClientResponseEndEvent extends IClientResponseEvent {
}
export declare const EVENT_HTTP_CLIENT_RESPONSE_END = "notify|module:httpClient.response-end";
/**
 * This event indicates that there was an error completing the response. Note:
 * this event will not be emitted before `EVENT_RESPONSE_RECEIVED`
 *
 * @property {Error|string} error - The error that occured
 */
export interface IClientResponseErrorEvent extends IClientResponseEvent {
    error: Error | string;
}
export declare const EVENT_HTTP_CLIENT_RESPONSE_ERROR = "notify|module:httpClient.response-error";
