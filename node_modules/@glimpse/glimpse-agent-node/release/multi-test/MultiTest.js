"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var multi_require_1 = require("@glimpse/multi-require");
var semver = require("semver");
var ModuleIdentifier_1 = require("../tracing/ModuleIdentifier");
function getLatestModuleVersion(moduleName, cb) {
    // Fetch the latest version of the driver from npm
    child_process_1.exec("npm view " + moduleName + " version", function (err, stdout) {
        if (err) {
            return cb(err, undefined);
        }
        var version = stdout.toString().trim();
        cb(undefined, version);
    });
}
function defineMultiTests(tests) {
    describe(tests.description, function () {
        // Extend the default timeout for multi-require tests as it takes extra time to pull down specific versions of packages...
        this.timeout(30000);
        it("supports the latest version", function (done) {
            getLatestModuleVersion(tests.moduleName, function (err, version) {
                if (err) {
                    return done(err);
                }
                var latestTested = false;
                tests.versions.forEach(function (testedVersion) {
                    if (semver.satisfies(version, testedVersion)) {
                        latestTested = true;
                    }
                });
                if (!latestTested) {
                    return done(new Error("The latest version of '" + tests.moduleName + "' (" + version + ") is not tested."));
                }
                if (!semver.satisfies(version, tests.supportedVersionRanges[tests.moduleName])) {
                    return done(new Error("The latest version of '" + tests.moduleName + "' (" + version + ") is not supported by Glimpse."));
                }
                done();
            });
        });
        var _loop_1 = function (version) {
            tests.defineTests(tests.description, version, function (cb) {
                multi_require_1.multiRequire(tests.moduleName, [version], {}, function (err, baseDir, requiredVersions) {
                    if (err) {
                        throw err;
                    }
                    var requiredVersion = requiredVersions[version];
                    cb(requiredVersion.originalModule, requiredVersion.resolvedVersion);
                });
            });
        };
        for (var _i = 0, _a = tests.versions; _i < _a.length; _i++) {
            var version = _a[_i];
            _loop_1(version);
        }
    });
}
exports.defineMultiTests = defineMultiTests;
function defineLatestTests(tests) {
    tests.defineTests(tests.description, 'latest', function (cb) {
        var moduleInfo = ModuleIdentifier_1.getModuleInfo(tests.moduleName, ModuleIdentifier_1.resolveModulePath(tests.moduleName, __dirname), require(tests.moduleName));
        cb(moduleInfo.originalModule, moduleInfo.version);
    });
}
exports.defineLatestTests = defineLatestTests;

//# sourceMappingURL=../../maps/multi-test/MultiTest.js.map
