/**
 * A component for buffering content written to a stream.
 */
export class StreamBuffer {
    private _encoding: string | undefined;
    private buffer: (string | Buffer)[] = [];

    /**
     * Gets the encoding specified during the last `write()` of a string.
     * 
     * @return An encoding (e.g. `utf-8`) or `undefined`.
     */
    public get encoding(): string | undefined {
        // TODO: We need a way to set the encoding for Buffer content (e.g. by sniffing 'Content-Type' header, if available).

        return this._encoding;
    }

    /**
     * Writes content to the buffer.
     * 
     * @param chunk The content to write.
     * @param encoding If the content is a string, its intended encoding or `undefined` to use the default.
     */
    public write(chunk: string | Buffer, encoding: string | undefined): void {
        if (typeof chunk === 'string') {
            this._encoding = encoding;
        }

        this.buffer.push(chunk);
    }

    /**
     * Returns the stringified contents of the buffer.
     * 
     * @return A string representing the contents of the buffer.
     */
    public toString(): string {
        return this.buffer
            .map(chunk => Buffer.isBuffer(chunk) ? chunk.toString(this.encoding) : chunk)
            .join('');
    }
}

export default StreamBuffer;
