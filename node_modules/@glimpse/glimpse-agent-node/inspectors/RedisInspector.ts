import { IAgent } from '../IAgent';
import tracing, { IEventCallback } from '../tracing/Tracing';
import { IMessageConverter } from '../messaging/IMessageConverter';
import { IStackHelper } from './util/StackHelper';
import { IInstrumentationEvent } from '../tracing/IInstrumentationEvent';
import { IErrorReportingService } from '@glimpse/glimpse-common';
import {
    EVENT_REDIS_START_METHODS, IRedisProxyStartCommand, IRedisStartCommand,
    EVENT_REDIS_END_METHODS, IRedisEndCommand, IRedisProxyEndCommand,
    IRedisCommandCore
} from '../tracing/module_instrumentors/RedisEvents';
import { IContextManager } from '../messaging/IContextManager';
import { IMessage } from '../messaging/IMessage';

export class RedisInspector {
    private agent: IAgent;
    private errorReportingService: IErrorReportingService;
    private stackHelper: IStackHelper;
    private messageConverter: IMessageConverter;
    private contextManager: IContextManager;
    private listeners: { [eventName: string]: IEventCallback } = {};

    public init(agent: IAgent, errorReportingService: IErrorReportingService) {
        this.agent = agent;
        this.errorReportingService = errorReportingService;
        this.stackHelper = agent.providers.stackHelper;
        this.messageConverter = agent.providers.messageConverter;
        this.contextManager = this.agent.providers.contextManager;

        this.listeners = {
            [EVENT_REDIS_START_METHODS]: (event) => this.onStartCommand(event),
            [EVENT_REDIS_END_METHODS]: (event) => this.onEndCommand(event)
        };

        for (const event in this.listeners) {
            if (this.listeners.hasOwnProperty(event)) {
                tracing.onAlways(event, this.listeners[event]);
            }
        }
    }

    public removeEventListeners() {
        for (const event in this.listeners) {
            if (this.listeners.hasOwnProperty(event)) {
                tracing.removeEventListener(event, this.listeners[event]);
            }
        }
    }

    private onStartCommand(event: IInstrumentationEvent) {
        if (this.contextManager.isWithinContext()) {
            const message = this.coreCreateMessage<IRedisStartCommand>([
                'data-start',
                'data-store-start',
                'data-store-redis-start',
                'call-stack',
                'correlation',
                'correlation-begin'
            ]);

            const userFrame = [this.stackHelper.tryGetFirstUserCodeFrame(this.stackHelper.captureStack(undefined))];

            this.stackHelper.mapFrames(userFrame, mappedFrames => {
                const data: IRedisProxyStartCommand = event.data;

                this.corePublish<IRedisStartCommand>(
                    message,
                    {
                        address: data.address,
                        command: data.commandObj.command,
                        commandArgs: data.commandObj.args,
                        correlationId: data.correlationId,
                        frames: mappedFrames
                    }
                );
            });
        }
    }

    private onEndCommand(event: IInstrumentationEvent) {
        if (this.contextManager.isWithinContext()) {
            const message = this.coreCreateMessage<IRedisEndCommand>([
                'data-end',
                'data-store-end',
                'data-store-redis-end',
                'correlation',
                'correlation-end'
            ]);

            const data: IRedisProxyEndCommand = event.data;

            this.corePublish<IRedisEndCommand>(
                message,
                {
                    address: data.address,
                    command: data.commandObj.command,
                    commandArgs: data.commandObj.args,
                    duration: data.duration,
                    result: data.result,
                    correlationId: data.correlationId
                },
                {
                    operation: data.commandObj.command,
                    duration: data.duration
                }
            );
        }
    }

    private coreCreateMessage<T extends IRedisCommandCore>(types: string[]) {
        if (this.contextManager.isWithinContext()) {
            return this.messageConverter.createMessageEnvelope<T>(
                types,
                undefined,
                this.contextManager.currentContext());
        }
    }

    private corePublish<T extends IRedisCommandCore>(message: IMessage<T>, payload: T, index?: {}) {
        if (this.contextManager.isWithinContext()) {
            message.payload = payload;
            message.indices = index;

            const transformedMessage = this.messageConverter.transformMessageForTransit(message, message.payload);

            this.agent.broker.sendMessage(transformedMessage);
        }
    }
}
