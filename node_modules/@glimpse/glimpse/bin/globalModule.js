#!/usr/bin/env node

const path = require('path');
const commandLineArgs = require('command-line-args');
const getUsage = require('command-line-usage');

const optionDefinitions = [
    { name: 'help', alias: 'h', type: Boolean, description: 'Displays help documentation.', },
    { name: 'entry', alias: 'e', type: String, defaultOption: true, description: 'Entry point which glimpse will wrap.' }
];

let entry = undefined;
let help = false;

if (process.argv.length > 2) {
    // lets find where the entry point is so we can break the glimpse args away from the user args
    let breakPosition = 2;
    for (let i = 2; i < process.argv.length; i++) {
        if (process.argv[i][0] !== '-') {
            breakPosition = i;
            break;
        }
    }

    // extract out the glimpse args and update the process.args so its as if glimpse was never there
    let moduleArgs = process.argv.splice(1, breakPosition, process.argv[breakPosition]);
    moduleArgs.shift();

    // process the args
    const options = commandLineArgs(optionDefinitions, { partial: true, argv: moduleArgs });
    entry = options.entry;
    help = options.help;

    if (entry) {
        const userEntryFullPath = path.join(process.cwd(), options.entry);

        require('../index').init({ glimpseLaunchMechanism: 'global' });
        require(userEntryFullPath);
    }
}

if (!entry || help) {
    if (!help) {
        console.log('glimpse: \'\' is not a glimpse command.\n'); // eslint-disable-line no-console
    }

    const sections = [
        {
            header: 'Glimpse',
            content: 'Command line wrapper which make running/testing an app with glimpse easy.'
        },
        {
            header: 'Synopsis',
            content: [
                '$ glimpse [bold]{--entry} [underline]{file}',
                '$ glimpse [bold]{--help}'
            ]
        },
        {
            header: 'Options',
            optionList: optionDefinitions
        }
    ];

    console.log(getUsage(sections)); // eslint-disable-line no-console
}
