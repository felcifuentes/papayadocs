'use strict';

import { IResource } from './IResource';
import { IServer } from './../IServer';
import { Handler, Request, Response, NextFunction } from 'express';
import express = require('express');
import path = require('path');
import { ITelemetryService, TelemetryEvents, RequestHelper } from '@glimpse/glimpse-common';

export class Resource implements IResource {
    private innerInvoke: Handler;
    private telemetryService: ITelemetryService;
    private sentHudImpressionTelemetry: boolean;

    public name = 'hud';
    public uriTemplate = 'main.js?hash={hash}';
    public templateName = 'hudScriptTemplate';
    public type = 'client';

    public invoke: Handler = (req: Request, res: Response, next: NextFunction): any => {  // tslint:disable-line:no-any
        if (!this.sentHudImpressionTelemetry) {
            this.sentHudImpressionTelemetry = true;

            const props = { clientIP: RequestHelper.getIp(req) };
            this.telemetryService.sendEvent(TelemetryEvents.NODE_SERVER_HUD_RESOURCE_ACCESSED, props, {});
        }

        return this.innerInvoke(req, res, next);
    };

    constructor(server: IServer) {
        const useDevBuild = server.providers.configSettings.get('use.embedded.dev.builds', false);
        const basePath = path.join(__dirname, '../../resources/embedded/hud');
        const location = useDevBuild ? path.join(basePath, 'dev') : path.join(basePath, 'prod');
        this.telemetryService = server.providers.telemetryService;
        this.innerInvoke = express.static(location);
    }
}
