'use strict';

import * as http from 'http';
import * as https from 'https';
import { printBannerGreeting } from '@glimpse/glimpse-common';
import { instance as glimpseServerInstance } from '../Server';

export function setupProxy() {
    patchServerExport(http, 'http');
    patchServerExport(https, 'https');
};

function buildApp() {

    // NOTE: Express provides wrappers around http for starting the web server. If used,
    //       apps may not otherwise import http themselves. In that case, the only mechanism
    //       for importing http (and thereby initializing the Glimpse proxy), is importing
    //       express. Since the server uses Express itself and is initialized before the
    //       agent, it needs to defer importing express until after agent initialization.
    //       This ensures that the first import of Express is done by the app itself and
    //       after all of the proxies have been registered.

    const express = require('express');
    const glimpse = require('../routes/glimpse');

    const app = express();

    app.use((req, res, next) => {
        /* eslint-disable camelcase */
        req.__glimpse_inProcessServerRequest = true;
        res.__glimpse_inProcessServerResponse = true;
        /* eslint-enable camelcase */

        next();
    });

    app.use('/glimpse', glimpse);

    return app;
};

interface IGlimpseListenedIncomingMessage extends http.IncomingMessage {
    __glimpse_originalUrl: string | undefined;
}

function patchServerListen(server: http.Server) {
    const app = buildApp();
    const originalListen = server.listen;

    // tslint:disable-next-line:no-any
    server.listen = <any> function glimpseServerListen(...listenArgs) {
        const requestListeners = server.listeners('request');

        server.removeAllListeners('request');

        server.on('request', function glimpseServerOnRequest(req, ...requestArgs) {
            const glimpseReq: IGlimpseListenedIncomingMessage = req;

            // Express `request` handlers will alter the `res.url`, so we maintain our own "original" URL...
            if (!glimpseReq.__glimpse_originalUrl) {
                glimpseReq.__glimpse_originalUrl = glimpseReq.url;
            }

            if (glimpseReq.__glimpse_originalUrl.indexOf('/glimpse') === 0) {
                app.call(this, req, ...requestArgs);
            }
            else {
                requestListeners.forEach(requestListener => {
                    requestListener.call(this, req, ...requestArgs);
                });
            }
        });

        return originalListen.call(this, ...listenArgs);
    };
}

function patchServerExport(serverModule, protocol: string) {
    const originalServer = serverModule.Server;

    serverModule.Server = function glimpseServer(...args) {
        const server = originalServer.call(this, ...args);

        patchServerInstance(server, 'http');

        return server;
    };

    serverModule.createServer = function glimpseServerCreateServer(...args) {
        return serverModule.Server.call(this, ...args);
    };
}

function patchServerInstance(server: http.Server, protocol: string) {
    patchServerListen(server);

    server.on('listening', () => {

        printBannerGreeting(glimpseServerInstance.providers.configSettings, `${protocol}://localhost:${server.address().port}/glimpse/client`);
    });
}
