import { IMessageQuery } from '../storage/IMessageQuery';
import { IResource } from './IResource';
import { IServer } from '../IServer';
export interface IContextSummaryResourcePayload {
    summary: {
        server: {
            dataStore: {
                totalCount: number;
                totalTime: number;
                listing: {
                    duration: number;
                    operation: string;
                    operationCategory: string;
                }[];
            };
            webServices: {
                totalCount: number;
                totalTime: number;
                listing: {
                    duration: number;
                    url: string;
                    method: string;
                    statusCode: string;
                }[];
            };
            logs: {
                totalErrorCount: number;
                totalWarnCount: number;
                totalInfoCount: number;
            };
        };
    };
}
export interface IDataHttpResponseIndex {
    url: string;
    statusCode: string;
    method: string;
    duration: number;
}
export interface IDataStoreEndIndex {
    operation: string;
    duration: number;
}
export interface ILogWriteIndex {
    level: string;
}
export declare const agentSourceEnumServer = "server";
export declare const dataHttpResponseType = "data-http-response";
export declare const dataStoreEndType = "data-store-end";
export declare const logWriteType = "log-write";
export declare const dataStoreMongodbReadStartType = "data-store-mongodb-read-start";
export declare const dataStoreMongodbInsertType = "data-store-mongodb-insert";
export declare const dataStoreMongodbDeleteType = "data-store-mongodb-delete";
export declare const dataStoreMongodbUpdateType = "data-store-mongodb-update";
export declare const dataStoreRedisEndType = "data-store-redis-end";
export declare class Resource implements IResource {
    private messageQuery;
    constructor(server?: IServer);
    init(messageQuery: IMessageQuery): void;
    name: string;
    uriTemplate: string;
    templateName: string;
    type: string;
    invoke(req: any, res: any): void;
}
