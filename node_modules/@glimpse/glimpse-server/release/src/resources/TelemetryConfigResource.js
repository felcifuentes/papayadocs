'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var glimpse_common_1 = require("@glimpse/glimpse-common");
var glimpse_common_2 = require("@glimpse/glimpse-common");
/**
 * Resource for telemetry configuration details to enable client to send telemetry data.
 *
 * Microsoft values privacy.  For details, please see our privacy
 * statement at http://go.microsoft.com/fwlink/?LinkId=521839&CLCID=0409.
 */
var Resource = (function () {
    function Resource(server) {
        this.name = 'telemetry-config';
        this.templateName = 'telemetryConfigTemplate';
        this.uriTemplate = '';
        this.type = 'client';
        this.telemetryConfig = glimpse_common_1.getTelemetryConfig(server.providers.configSettings);
        this.serverTelemetrySessionId = server.providers.telemetryService.getSessionId();
        this.configSettings = server.providers.configSettings;
    }
    Resource.prototype.getAppInstanceData = function (cb) {
        var _this = this;
        if (this.appInstanceData) {
            process.nextTick(function () {
                cb(_this.appInstanceData);
            });
        }
        else {
            glimpse_common_2.getTelemetryAppInstanceData(this.configSettings, function (data) {
                _this.appInstanceData = data;
                cb(_this.appInstanceData);
            });
        }
    };
    /**
     *  returns an ITelemetryConfig object with the appropriate values.
     */
    Resource.prototype.createTelemetryConfig = function (clientIP, cb) {
        var _this = this;
        this.getAppInstanceData(function (appInstanceData) {
            var clientTelemetryInfo = {
                clientIP: clientIP,
                serverSessionId: _this.serverTelemetrySessionId,
                // ITelemetryConfig
                enabled: _this.telemetryConfig.enabled,
                instrumentationKey: _this.telemetryConfig.instrumentationKey,
                uri: _this.telemetryConfig.uri,
                privacyPolicy: _this.telemetryConfig.privacyPolicy,
                // ITelemetryAppInstanceData
                serverGlimpseVersion: appInstanceData.glimpseVersion,
                serverMachineId: appInstanceData.machineId,
                serverAppName: appInstanceData.appName,
                serverOSPlatform: appInstanceData.operatingSystemPlatform,
                serverOSRelease: appInstanceData.operatingSystemRelease,
                serverOSType: appInstanceData.operatingSystemType,
                serverRuntimeVersion: appInstanceData.runtimeVersion,
                serverRuntimeName: appInstanceData.runtimeName
            };
            cb(clientTelemetryInfo);
        });
    };
    /**
     * Invoke the resource
     */
    Resource.prototype.invoke = function (req, res) {
        this.createTelemetryConfig(req.socket.remoteAddress, function (config) {
            res.status(200);
            res.type('application/json');
            res.send(config);
        });
    };
    return Resource;
}());
exports.Resource = Resource;

//# sourceMappingURL=../../../maps/src/resources/TelemetryConfigResource.js.map
