"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MessageUtilities_1 = require("../messaging/MessageUtilities");
;
;
exports.agentSourceEnumServer = 'server';
exports.dataHttpResponseType = 'data-http-response';
exports.dataStoreEndType = 'data-store-end';
exports.logWriteType = 'log-write';
exports.dataStoreMongodbReadStartType = 'data-store-mongodb-read-start';
exports.dataStoreMongodbInsertType = 'data-store-mongodb-insert';
exports.dataStoreMongodbDeleteType = 'data-store-mongodb-delete';
exports.dataStoreMongodbUpdateType = 'data-store-mongodb-update';
exports.dataStoreRedisEndType = 'data-store-redis-end';
var numberToCrudMap = ['Create', 'Read', 'Update', 'Delete'];
var redisCommandToNumberMap = {
    geoadd: 0,
    hmset: 0,
    hset: 0,
    hsetnx: 0,
    linsert: 0,
    lpush: 0,
    lpushx: 0,
    lset: 0,
    mset: 0,
    msetnx: 0,
    psetex: 0,
    rpush: 0,
    rpushx: 0,
    sadd: 0,
    set: 0,
    setbit: 0,
    setex: 0,
    setnx: 0,
    setrange: 0,
    zadd: 0,
    bitcount: 1,
    bitop: 1,
    dbsize: 1,
    dump: 1,
    echo: 1,
    exists: 1,
    geohash: 1,
    geopos: 1,
    geodist: 1,
    georadius: 1,
    georadiusbymember: 1,
    get: 1,
    getbit: 1,
    getrange: 1,
    getset: 1,
    hexists: 1,
    hget: 1,
    hgetall: 1,
    hkeys: 1,
    hlen: 1,
    hmget: 1,
    hstrlen: 1,
    hvals: 1,
    keys: 1,
    lastsave: 1,
    llen: 1,
    lrange: 1,
    mget: 1,
    pttl: 1,
    randomkey: 1,
    scard: 1,
    sdiff: 1,
    sdiffstore: 1,
    sinter: 1,
    sinterstore: 1,
    sismember: 1,
    smembers: 1,
    sort: 1,
    srandmember: 1,
    strlen: 1,
    sunion: 1,
    sunionstore: 1,
    time: 1,
    ttl: 1,
    type: 1,
    zcard: 1,
    zcount: 1,
    zinterstore: 1,
    zlexcount: 1,
    zrange: 1,
    zrangebylex: 1,
    zrevrangebylex: 1,
    zrangebyscore: 1,
    zrank: 1,
    zrevrangebyscore: 1,
    zrevrank: 1,
    zscore: 1,
    zunionstore: 1,
    sscan: 1,
    hscan: 1,
    zscan: 1,
    append: 2,
    decr: 2,
    decrby: 2,
    hincrby: 2,
    hincrbyfloat: 2,
    incr: 2,
    incrby: 2,
    incrbyfloat: 2,
    rename: 2,
    renamenx: 2,
    smove: 2,
    touch: 2,
    zincrby: 2,
    del: 3,
    expire: 3,
    expireat: 3,
    flushall: 3,
    flushdb: 3,
    hdel: 3,
    lpop: 3,
    lrem: 3,
    ltrim: 3,
    pexpire: 3,
    pexpireat: 3,
    rpop: 3,
    rpoplpush: 3,
    spop: 3,
    srem: 3,
    unlink: 3,
    zrem: 3,
    zremrangebylex: 3,
    zremrangebyrank: 3,
    zremrangebyscore: 3
};
var getOperationCategoryStrategy = (_a = {},
    _a[exports.dataStoreMongodbReadStartType] = function () { return 'Read'; },
    _a[exports.dataStoreMongodbInsertType] = function () { return 'Create'; },
    _a[exports.dataStoreMongodbDeleteType] = function () { return 'Delete'; },
    _a[exports.dataStoreMongodbUpdateType] = function () { return 'Update'; },
    _a[exports.dataStoreRedisEndType] = function (operation) {
        if (operation !== undefined) {
            operation = operation.toLowerCase();
            if (redisCommandToNumberMap[operation] !== undefined) {
                return numberToCrudMap[redisCommandToNumberMap[operation]];
            }
        }
        return 'Other';
    },
    _a);
function getOperationCategory(types, operation) {
    for (var i = 0; i < types.length; i++) {
        var type = types[i];
        if (getOperationCategoryStrategy[type]) {
            return getOperationCategoryStrategy[type](operation);
        }
    }
    return 'Other';
}
function getLevel(level) {
    switch (level.toLowerCase()) {
        case 'critical':
        case 'fatal':
        case 'error':
            return 'Error';
        case 'warn':
        case 'warning':
            return 'Warning';
        case 'information':
        case 'info':
            return 'Info';
        case 'verbose':
        case 'trace':
        case 'silly':
        case 'debug':
            return 'Debug';
        default:
            return 'Log';
    }
}
var Resource = (function () {
    function Resource(server) {
        this.name = 'context-summary';
        this.uriTemplate = '?contextId={contextId}';
        this.templateName = 'contextSummaryTemplate';
        this.type = 'client';
        if (server) {
            this.init(server.providers.messageQuery);
        }
    }
    Resource.prototype.init = function (messageQuery) {
        this.messageQuery = messageQuery;
    };
    Resource.prototype.invoke = function (req, res) {
        if (!req.query.contextId) {
            res.sendStatus(404);
            res.send('missing contextId parameter');
        }
        else {
            var messages = this.messageQuery.queryMessages(req.query.contextId, [exports.dataHttpResponseType, exports.dataStoreEndType, exports.logWriteType]);
            var payloads_1 = {
                summary: {
                    server: {
                        dataStore: {
                            totalCount: 0,
                            totalTime: 0,
                            listing: []
                        },
                        webServices: {
                            totalCount: 0,
                            totalTime: 0,
                            listing: []
                        },
                        logs: {
                            totalErrorCount: 0,
                            totalWarnCount: 0,
                            totalInfoCount: 0
                        }
                    }
                }
            };
            var messageTypeProcessing = (_a = {},
                _a[exports.dataHttpResponseType] = function (message) {
                    var index = message.indices;
                    if (message.agent.source === exports.agentSourceEnumServer
                        && index !== undefined) {
                        var duration = Number(index.duration) || 0;
                        var summary = payloads_1.summary.server.webServices;
                        summary.totalCount++;
                        summary.totalTime += duration;
                        summary.listing.push({
                            duration: duration,
                            url: index.url,
                            method: index.method,
                            statusCode: index.statusCode
                        });
                    }
                },
                _a[exports.dataStoreEndType] = function (message) {
                    var index = message.indices;
                    // we don't want to process mongodb-read-end messages
                    if (message.agent.source === exports.agentSourceEnumServer
                        && message.types.indexOf('data-store-mongodb-read-end') === -1
                        && index !== undefined) {
                        var duration = Number(index.duration) || 0;
                        var summary = payloads_1.summary.server.dataStore;
                        summary.totalCount++;
                        summary.totalTime += duration;
                        summary.listing.push({
                            duration: duration,
                            operation: index.operation,
                            operationCategory: getOperationCategory(message.types, index.operation)
                        });
                    }
                },
                _a[exports.logWriteType] = function (message) {
                    var index = message.indices;
                    if (message.agent.source === exports.agentSourceEnumServer
                        && index !== undefined) {
                        var level = index.level;
                        var levelCategory = getLevel(level);
                        var summary = payloads_1.summary.server.logs;
                        if (levelCategory === 'Error') {
                            summary.totalErrorCount++;
                        }
                        else if (levelCategory === 'Warning') {
                            summary.totalWarnCount++;
                        }
                        else if (levelCategory === 'Info') {
                            summary.totalInfoCount++;
                        }
                    }
                },
                _a);
            MessageUtilities_1.MessageUtilities.processMessagesForTypes(messages, messageTypeProcessing);
            var stringPayload = JSON.stringify(payloads_1);
            res.status(200);
            res.type('application/json');
            res.send(stringPayload);
        }
        var _a;
    };
    return Resource;
}());
exports.Resource = Resource;
var _a;

//# sourceMappingURL=../../../maps/src/resources/ContextSummaryResource.js.map
