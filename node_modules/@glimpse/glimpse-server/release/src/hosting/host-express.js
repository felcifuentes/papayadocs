'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var http = require("http");
var https = require("https");
var glimpse_common_1 = require("@glimpse/glimpse-common");
var Server_1 = require("../Server");
function setupProxy() {
    patchServerExport(http, 'http');
    patchServerExport(https, 'https');
}
exports.setupProxy = setupProxy;
;
function buildApp() {
    // NOTE: Express provides wrappers around http for starting the web server. If used,
    //       apps may not otherwise import http themselves. In that case, the only mechanism
    //       for importing http (and thereby initializing the Glimpse proxy), is importing
    //       express. Since the server uses Express itself and is initialized before the
    //       agent, it needs to defer importing express until after agent initialization.
    //       This ensures that the first import of Express is done by the app itself and
    //       after all of the proxies have been registered.
    var express = require('express');
    var glimpse = require('../routes/glimpse');
    var app = express();
    app.use(function (req, res, next) {
        /* eslint-disable camelcase */
        req.__glimpse_inProcessServerRequest = true;
        res.__glimpse_inProcessServerResponse = true;
        /* eslint-enable camelcase */
        next();
    });
    app.use('/glimpse', glimpse);
    return app;
}
;
function patchServerListen(server) {
    var app = buildApp();
    var originalListen = server.listen;
    // tslint:disable-next-line:no-any
    server.listen = function glimpseServerListen() {
        var listenArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            listenArgs[_i] = arguments[_i];
        }
        var requestListeners = server.listeners('request');
        server.removeAllListeners('request');
        server.on('request', function glimpseServerOnRequest(req) {
            var _this = this;
            var requestArgs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                requestArgs[_i - 1] = arguments[_i];
            }
            var glimpseReq = req;
            // Express `request` handlers will alter the `res.url`, so we maintain our own "original" URL...
            if (!glimpseReq.__glimpse_originalUrl) {
                glimpseReq.__glimpse_originalUrl = glimpseReq.url;
            }
            if (glimpseReq.__glimpse_originalUrl.indexOf('/glimpse') === 0) {
                app.call.apply(app, [this, req].concat(requestArgs));
            }
            else {
                requestListeners.forEach(function (requestListener) {
                    requestListener.call.apply(requestListener, [_this, req].concat(requestArgs));
                });
            }
        });
        return originalListen.call.apply(originalListen, [this].concat(listenArgs));
    };
}
function patchServerExport(serverModule, protocol) {
    var originalServer = serverModule.Server;
    serverModule.Server = function glimpseServer() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var server = originalServer.call.apply(originalServer, [this].concat(args));
        patchServerInstance(server, 'http');
        return server;
    };
    serverModule.createServer = function glimpseServerCreateServer() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return (_a = serverModule.Server).call.apply(_a, [this].concat(args));
        var _a;
    };
}
function patchServerInstance(server, protocol) {
    patchServerListen(server);
    server.on('listening', function () {
        glimpse_common_1.printBannerGreeting(Server_1.instance.providers.configSettings, protocol + "://localhost:" + server.address().port + "/glimpse/client");
    });
}

//# sourceMappingURL=../../../maps/src/hosting/host-express.js.map
