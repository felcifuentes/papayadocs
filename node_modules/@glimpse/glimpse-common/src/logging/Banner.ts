import { PackageHelper } from '../common/PackageHelper';
import { IConfigSettings } from '../configuration/IConfigSettings';
import * as fs from 'fs';
import * as path from 'path';

// we only want to print banner once
let bannerPrinted = false;

function repeat(string: string, times: number): string {
    let result: string = '';

    for (let i = 0; i < times; i++) {
        result += string;
    }

    return result;
}

function rightPad(s: string, length: number) {
    return s = s + repeat(' ', length - s.length);
}

function shouldPrintShortBanner(configSettings: IConfigSettings): boolean {
    return configSettings.getBoolean('banner.short', false);
}

function shouldSkipBanner(configSettings: IConfigSettings): boolean {
    return configSettings.getBoolean('banner.suppress', false);
}

export function printShortBanner(clientUri?: string) {
    const packageHelper = PackageHelper.instance;
    const packagePath = packageHelper.findPackageJsonPath(__dirname);
    const packageVersion = packageHelper.getPackageVersion(packagePath);

    const logText = `Running Project Glimpse v${packageVersion}.`;
    let clientText = '';
    if (clientUri) {
        clientText = ` Open Glimpse at ${clientUri}`;
    }
    console.log(`${logText}${clientText}`);
}

export function getLogoG(logText, seperator, clientHeader, docsHeader): string {
    const info1 = clientHeader ? clientHeader : docsHeader;
    const info2 = clientHeader ? docsHeader : '';
    const loc = path.join(__dirname, 'logo.txt');
    let text = fs.readFileSync(loc, { encoding: 'utf8' });
    text = text.replace(/\$glimpse-logText\$/g, logText);
    text = text.replace(/\$glimpse-seperator\$/g, seperator);
    text = text.replace(/\$glimpse-info1\$/g, info1);
    text = text.replace(/\$glimpse-info2\$/g, info2);
    return text;
}

export function printBannerGreeting(configSettings: IConfigSettings, clientUri?: string): void {
    if (bannerPrinted || shouldSkipBanner(configSettings)) {
        return;
    }

    bannerPrinted = true;
    if (shouldPrintShortBanner(configSettings)) {
        printShortBanner(clientUri);
    }
    else {
        printLongBanner(clientUri);
    }
}

export function printLongBanner(clientUri?: string): void {
    const packageHelper = PackageHelper.instance;
    const packagePath = packageHelper.findPackageJsonPath(__dirname);
    const packageVersion = packageHelper.getPackageVersion(packagePath);

    const logText = 'Running Project Glimpse v' + packageVersion;
    const clientHeader = ' - Open Glimpse at: ';
    const docsHeader = ' - More info at: ';
    const max = Math.max(clientHeader.length, docsHeader.length);

    let clientText = undefined;
    if (clientUri) {
        clientText = `${rightPad(clientHeader, max)} ${clientUri}`;
    }
    const docsText = `${rightPad(docsHeader, max)} http://node.getglimpse.com`;

    const horizontalRule2 = repeat('-', logText.length);
    console.log(getLogoG(logText, horizontalRule2, clientText, docsText));
}
