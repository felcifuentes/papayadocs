import { ServerRequest } from 'http';

export class RequestHelper {
    public static getIp(request: ServerRequest) {
        const rawHeaders = request.headers || (<any>request).rawHeaders; // tslint:disable-line:no-any
        const connectionRemoteAddress = request.connection.remoteAddress;
        const socketRemoteAddress = (<any>request).socket && (<any>request).socket.remoteAddress; // tslint:disable-line:no-any
        const legacySocketRemoteAddress = request.connection['socket'] && request.connection['socket'].remoteAddress; // tslint:disable-line:no-string-literal

        // regex to match ipv4 without port
        // Note: including the port would cause the payload to be rejected by the data collector
        const ipMatch = /[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/;

        const check = (str: string): string => {
            const results = ipMatch.exec(str);
            if (results) {
                return results[0];
            }
        };

        let ip = check(rawHeaders['x-forwarded-for'])
            || check(rawHeaders['x-client-ip'])
            || check(rawHeaders['x-real-ip'])
            || check(connectionRemoteAddress)
            || check(socketRemoteAddress)
            || check(legacySocketRemoteAddress);

        // node v12 returns this if the address is "localhost"
        if (!ip
            && connectionRemoteAddress
            && connectionRemoteAddress.substr
            && connectionRemoteAddress.substr(0, 2) === '::') {
            ip = '127.0.0.1';
        }

        return ip;
    }
}
