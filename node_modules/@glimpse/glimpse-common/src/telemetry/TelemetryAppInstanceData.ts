import crypto = require('crypto');
import os = require('os');

import { PackageHelper } from '../common/PackageHelper';
import { IConfigSettings } from './../configuration/IConfigSettings';

// tslint:disable-next-line:no-var-requires
const getmac = require('getmac');

/**
 *  Shape of telemetry config resource returned from the server.
 */
export interface ITelemetryAppInstanceData {

    /** serverGlimpseVersion */
    glimpseVersion: string;

    /** unique ID for the machine hosting the server.  This is a SHA256 hash of the machine's mac address. */
    machineId: string;

    /** name of the application hosting the glimpse.server */
    appName: string;

    /** OS Platform where server is running */
    operatingSystemPlatform: string;

    /** OS Release where server is running */
    operatingSystemRelease: string;

    /** OS Type where server is running */
    operatingSystemType: string;

    /** Version of the runtime */
    runtimeVersion: string;

    /** Runtime Name.  e.g., 'NodeJS' or '.net' */
    runtimeName: string;
}

/**
 * singletone instance per app
 */
let telemetryAppInstanceData: ITelemetryAppInstanceData;

/**
 * retrieve an ITelemetryAppInstanceData for the currently running app.
 */
export function getTelemetryAppInstanceData(configSettings: IConfigSettings, cb: (appInstanceData: ITelemetryAppInstanceData) => void) {
    if (!telemetryAppInstanceData) {
        const glimpseVersion = PackageHelper.instance.getPackageVersion(PackageHelper.instance.findGlimpseCommonPackageJsonPath());
        const appName = PackageHelper.instance.getPackageName(PackageHelper.instance.findAppPackageJsonPath());

        AppInstanceDataHelpers.computeMachineId(
            configSettings.get('telemetry.identity.salt', undefined),
            machineId => {
                telemetryAppInstanceData = {
                    glimpseVersion,
                    appName,
                    machineId: machineId,
                    operatingSystemPlatform: os.platform(),
                    operatingSystemRelease: os.release(),
                    operatingSystemType: os.type(),
                    runtimeVersion: process.version,
                    runtimeName: 'NodeJS'
                };
                cb(telemetryAppInstanceData);
            }
        );
    } else {
        process.nextTick(() => {
            cb(telemetryAppInstanceData);
        });
    }
}

export class AppInstanceDataHelpers {
    /**
     * compute machine ID for this node
     * @salt - an optional user-specified value that gives users control over their machine identity in our telemetry system.
     *         if specified, it will be included in the hashed value of the mac address that we use a "machine identity" for
     *         for telemetry.
     */
    public static computeMachineId(salt: string, cb: (machineId: string) => void) {
        AppInstanceDataHelpers.getMacAddress(macAddress => {
            let data = macAddress;
            if (salt && salt.length > 0) {
                data = `salt: ${salt}, macAddress: ${macAddress}`;
            }
            const machineId = crypto.createHash('sha256')
                .update(data, 'utf8')
                .digest('hex');
            cb(machineId);
        });
    }

    /**
     * Retrieve a mac address for the current node.
     *
     * Node 8.0 & 8.1 introduced a bug on *nix where the mac addresses
     * returned by os.networkInterfaces() were incorrect.
     *
     * In order to keep machine IDs the same, we'll change to
     * use getmac library, which has been consistent.
     */
    public static getMacAddress(cb: (string) => void) {
        getmac.getMac(function(err, macAddress) {
            cb(macAddress);
        });
    }
}
