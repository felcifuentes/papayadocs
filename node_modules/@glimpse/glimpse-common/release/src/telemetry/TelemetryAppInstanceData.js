"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = require("crypto");
var os = require("os");
var PackageHelper_1 = require("../common/PackageHelper");
// tslint:disable-next-line:no-var-requires
var getmac = require('getmac');
/**
 * singletone instance per app
 */
var telemetryAppInstanceData;
/**
 * retrieve an ITelemetryAppInstanceData for the currently running app.
 */
function getTelemetryAppInstanceData(configSettings, cb) {
    if (!telemetryAppInstanceData) {
        var glimpseVersion_1 = PackageHelper_1.PackageHelper.instance.getPackageVersion(PackageHelper_1.PackageHelper.instance.findGlimpseCommonPackageJsonPath());
        var appName_1 = PackageHelper_1.PackageHelper.instance.getPackageName(PackageHelper_1.PackageHelper.instance.findAppPackageJsonPath());
        AppInstanceDataHelpers.computeMachineId(configSettings.get('telemetry.identity.salt', undefined), function (machineId) {
            telemetryAppInstanceData = {
                glimpseVersion: glimpseVersion_1,
                appName: appName_1,
                machineId: machineId,
                operatingSystemPlatform: os.platform(),
                operatingSystemRelease: os.release(),
                operatingSystemType: os.type(),
                runtimeVersion: process.version,
                runtimeName: 'NodeJS'
            };
            cb(telemetryAppInstanceData);
        });
    }
    else {
        process.nextTick(function () {
            cb(telemetryAppInstanceData);
        });
    }
}
exports.getTelemetryAppInstanceData = getTelemetryAppInstanceData;
var AppInstanceDataHelpers = (function () {
    function AppInstanceDataHelpers() {
    }
    /**
     * compute machine ID for this node
     * @salt - an optional user-specified value that gives users control over their machine identity in our telemetry system.
     *         if specified, it will be included in the hashed value of the mac address that we use a "machine identity" for
     *         for telemetry.
     */
    AppInstanceDataHelpers.computeMachineId = function (salt, cb) {
        AppInstanceDataHelpers.getMacAddress(function (macAddress) {
            var data = macAddress;
            if (salt && salt.length > 0) {
                data = "salt: " + salt + ", macAddress: " + macAddress;
            }
            var machineId = crypto.createHash('sha256')
                .update(data, 'utf8')
                .digest('hex');
            cb(machineId);
        });
    };
    /**
     * Retrieve a mac address for the current node.
     *
     * Node 8.0 & 8.1 introduced a bug on *nix where the mac addresses
     * returned by os.networkInterfaces() were incorrect.
     *
     * In order to keep machine IDs the same, we'll change to
     * use getmac library, which has been consistent.
     */
    AppInstanceDataHelpers.getMacAddress = function (cb) {
        getmac.getMac(function (err, macAddress) {
            cb(macAddress);
        });
    };
    return AppInstanceDataHelpers;
}());
exports.AppInstanceDataHelpers = AppInstanceDataHelpers;

//# sourceMappingURL=../../../maps/src/telemetry/TelemetryAppInstanceData.js.map
