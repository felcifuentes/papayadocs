"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RequestHelper = (function () {
    function RequestHelper() {
    }
    RequestHelper.getIp = function (request) {
        var rawHeaders = request.headers || request.rawHeaders; // tslint:disable-line:no-any
        var connectionRemoteAddress = request.connection.remoteAddress;
        var socketRemoteAddress = request.socket && request.socket.remoteAddress; // tslint:disable-line:no-any
        var legacySocketRemoteAddress = request.connection['socket'] && request.connection['socket'].remoteAddress; // tslint:disable-line:no-string-literal
        // regex to match ipv4 without port
        // Note: including the port would cause the payload to be rejected by the data collector
        var ipMatch = /[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/;
        var check = function (str) {
            var results = ipMatch.exec(str);
            if (results) {
                return results[0];
            }
        };
        var ip = check(rawHeaders['x-forwarded-for'])
            || check(rawHeaders['x-client-ip'])
            || check(rawHeaders['x-real-ip'])
            || check(connectionRemoteAddress)
            || check(socketRemoteAddress)
            || check(legacySocketRemoteAddress);
        // node v12 returns this if the address is "localhost"
        if (!ip
            && connectionRemoteAddress
            && connectionRemoteAddress.substr
            && connectionRemoteAddress.substr(0, 2) === '::') {
            ip = '127.0.0.1';
        }
        return ip;
    };
    return RequestHelper;
}());
exports.RequestHelper = RequestHelper;

//# sourceMappingURL=../../../maps/src/common/RequestHelper.js.map
