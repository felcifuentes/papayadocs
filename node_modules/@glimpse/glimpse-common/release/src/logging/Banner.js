"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PackageHelper_1 = require("../common/PackageHelper");
var fs = require("fs");
var path = require("path");
// we only want to print banner once
var bannerPrinted = false;
function repeat(string, times) {
    var result = '';
    for (var i = 0; i < times; i++) {
        result += string;
    }
    return result;
}
function rightPad(s, length) {
    return s = s + repeat(' ', length - s.length);
}
function shouldPrintShortBanner(configSettings) {
    return configSettings.getBoolean('banner.short', false);
}
function shouldSkipBanner(configSettings) {
    return configSettings.getBoolean('banner.suppress', false);
}
function printShortBanner(clientUri) {
    var packageHelper = PackageHelper_1.PackageHelper.instance;
    var packagePath = packageHelper.findPackageJsonPath(__dirname);
    var packageVersion = packageHelper.getPackageVersion(packagePath);
    var logText = "Running Project Glimpse v" + packageVersion + ".";
    var clientText = '';
    if (clientUri) {
        clientText = " Open Glimpse at " + clientUri;
    }
    console.log("" + logText + clientText);
}
exports.printShortBanner = printShortBanner;
function getLogoG(logText, seperator, clientHeader, docsHeader) {
    var info1 = clientHeader ? clientHeader : docsHeader;
    var info2 = clientHeader ? docsHeader : '';
    var loc = path.join(__dirname, 'logo.txt');
    var text = fs.readFileSync(loc, { encoding: 'utf8' });
    text = text.replace(/\$glimpse-logText\$/g, logText);
    text = text.replace(/\$glimpse-seperator\$/g, seperator);
    text = text.replace(/\$glimpse-info1\$/g, info1);
    text = text.replace(/\$glimpse-info2\$/g, info2);
    return text;
}
exports.getLogoG = getLogoG;
function printBannerGreeting(configSettings, clientUri) {
    if (bannerPrinted || shouldSkipBanner(configSettings)) {
        return;
    }
    bannerPrinted = true;
    if (shouldPrintShortBanner(configSettings)) {
        printShortBanner(clientUri);
    }
    else {
        printLongBanner(clientUri);
    }
}
exports.printBannerGreeting = printBannerGreeting;
function printLongBanner(clientUri) {
    var packageHelper = PackageHelper_1.PackageHelper.instance;
    var packagePath = packageHelper.findPackageJsonPath(__dirname);
    var packageVersion = packageHelper.getPackageVersion(packagePath);
    var logText = 'Running Project Glimpse v' + packageVersion;
    var clientHeader = ' - Open Glimpse at: ';
    var docsHeader = ' - More info at: ';
    var max = Math.max(clientHeader.length, docsHeader.length);
    var clientText = undefined;
    if (clientUri) {
        clientText = rightPad(clientHeader, max) + " " + clientUri;
    }
    var docsText = rightPad(docsHeader, max) + " http://node.getglimpse.com";
    var horizontalRule2 = repeat('-', logText.length);
    console.log(getLogoG(logText, horizontalRule2, clientText, docsText));
}
exports.printLongBanner = printLongBanner;

//# sourceMappingURL=../../../maps/src/logging/Banner.js.map
